import numpy as np
import pandas as pd 
#import matplotlib.pyplot as plt
#import seaborn as sns
#from datetime import datetime
import streamlit as st
from PIL import Image

from sentence_transformers import SentenceTransformer, util

#model = SentenceTransformer('all-MiniLM-L6-v2')

st.cache_data()
def load_model():
	  return SentenceTransformer('all-MiniLM-L6-v2')

model = load_model()

alias_num = 7

# –°—á–µ—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
data = pd.read_csv('Alias_data_1.csv')
for i in range(len(data['embedding_1'])):
    for j in range(1, alias_num + 1):
        data[f'embedding_{j}'][i] = np.array(data[f'embedding_{j}'][i].replace('[', ' ').replace(']', ' ').split()).astype(np.float64)

st.title(':green[–†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—É—à–∏ –∏ —É–º—ã –ø–æ Alias:) Alias soulmates ‚ú®]')

image = Image.open('3.jpg')
st.image(image)

name = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –¥–æ—Ä–æ–≥–æ–π –∏–≥—Ä–æ–∫')
phone_number = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞–∫—Ü–∏–∏, –≤ —Å–ª—É—á–∞–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–º–µ–Ω (–±–µ–∑ +7 –∏ –¥—Ä))')
link = st.text_input('–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏:) (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü —Å–µ—Ç–∏, —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –¥—Ä.)')

word_1 = '–ó–∞–∫–ª–∞–¥–∫–∞'
word_2 = '–û–ø—Ä–æ–º–µ—Ç—á–∏–≤—ã–π'
word_3 = '–ú–µ—á—Ç–∞'
word_4 = '–Å—à–∫–∏–Ω –∫–æ—Ç'
word_5 = '–°–º—ã—Å–ª–æ–≤–∞—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è'
word_6 = '–ê–≤–æ—Å—å'
word_7 = '–õ—é–±–æ–≤—å'

st.header(':green[–ì–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–æ–µ—Ö–∞–ª–∏! ü§ò]')
st.header(':green[–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º, –Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏:) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∫–∞–∫ –±—ã –≤—ã –æ–±—ä—è—Å–Ω–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–Ω–æ–∫–æ—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!üí´]')

image = Image.open('5.JPG')
st.image(image)

st.text('')
st.header(':blue[–ó–∞–∫–ª–∞–¥–∫–∞] ‚úå')
alias_1 = st.text_input('–ó–∞–∫–ª–∞–¥–∫–∞', label_visibility="hidden")


st.text('')
st.text('')
st.header(':blue[–û–ø—Ä–æ–º–µ—Ç—á–∏–≤—ã–π] üò∏')
alias_2 = st.text_input('–û–ø—Ä–æ–º–µ—Ç—á–∏–≤—ã–π', label_visibility="hidden")

st.text('')
st.text('')
st.header(':blue[–ú–µ—á—Ç–∞] ‚ú®')
alias_3 = st.text_input('–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å', label_visibility="hidden")

st.text('')
st.text('')
st.header(':blue[–Å—à–∫–∏–Ω –∫–æ—Ç] üëÄ')
alias_4 = st.text_input('–Å—à–∫–∏–Ω –∫–æ—Ç', label_visibility="hidden")

st.text('')
st.text('')
st.header(':blue[–°–º—ã—Å–ª–æ–≤–∞—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è] ‚òÄ')
alias_5 = st.text_input('–°–º—ã—Å–ª–æ–≤–∞—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è', label_visibility="hidden")

st.text('')
st.text('')
st.header(':blue[–ê–≤–æ—Å—å] üåø')
alias_6 = st.text_input('–ê–≤–æ—Å—å', label_visibility="hidden")

st.text('')
st.text('')
st.header(':blue[–õ—é–±–æ–≤—å] ‚ù§')
alias_7 = st.text_input('–õ—é–±–æ–≤—å', label_visibility="hidden")

add_and_find = st.button('–ü–æ–µ—Ö–∞–ª–∏, –Ω–∞–π–¥–µ–º –∫–æ–≥–æ –Ω–∏–±—É–¥—å')
if add_and_find:
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é.
    row_index = data.loc[data['phone_number'] == int(phone_number)].index
    
    #–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º embeddings
    embedding_1 = model.encode(alias_1)
    embedding_2 = model.encode(alias_2)
    embedding_3 = model.encode(alias_3)
    embedding_4 = model.encode(alias_4)
    embedding_5 = model.encode(alias_5)
    embedding_6 = model.encode(alias_6)
    embedding_7 = model.encode(alias_7)
    
    if row_index.size > 0:
        data.loc[row_index.to_list()[0], ['name', 'phone_number', 'link',
                             'alias_1', 'alias_2', 'alias_3','alias_4', 'alias_5', 'alias_6', 'alias_7',
                             'embedding_1', 'embedding_2', 'embedding_3','embedding_4','embedding_5',
                             'embedding_6','embedding_7',
                             'best_pair_1','best_pair_2','best_pair_3',
                             'best_score_1','best_score_2','best_score_3']] = \
        name, phone_number, link, alias_1, alias_2, alias_3, alias_4, alias_5, alias_6, alias_7, \
        embedding_1, embedding_2, embedding_3, embedding_4, embedding_5, embedding_6, embedding_7, 0, 0, 0, 0, 0, 0
        
    else:
        data.loc[len(data.index)] = [name, phone_number, link, alias_1, alias_2, alias_3, alias_4, alias_5, alias_6, alias_7, \
        embedding_1, embedding_2, embedding_3, embedding_4, embedding_5, embedding_6, embedding_7, 0, 0, 0, 0, 0, 0]
    #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É, –≤–∞–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞
    data.to_csv('Alias_data_1.csv',index=False)
    
    # –°—á–µ—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    data = pd.read_csv('Alias_data_1.csv')
    for i in range(len(data['embedding_1'])):
        for j in range(1, alias_num + 1):
            data[f'embedding_{j}'][i] = np.array(data[f'embedding_{j}'][i].replace('[', ' ').replace(']', ' ').split()).astype(np.float64)
    
    # –°—á–µ—Ç–∞–µ–º –≤—Å–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É –≤—Å–µ—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    scores_by_i = []
    strings_count, _ = data.shape
    for i in range(0,strings_count):
        inner_scores = []
        for j in range(0,strings_count):
            cosine_scores = []
            for k in range(1, alias_num + 1):
                cosine_scores.append(float(util.cos_sim(data.iloc[i][f'embedding_{k}'], data.iloc[j][f'embedding_{k}'])))
            inner_scores.append([i, j, np.mean(cosine_scores)])
        scores_by_i.append(inner_scores)
    
    # –ò—â–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–µ–º –±–ª–∏–∑–∫–∏—Ö –ø–æ —Å–º—ã—Å–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    scores_by_i = np.array(scores_by_i)
    for i in range(0,len(scores_by_i)):
        scores = scores_by_i[i]
        sorted_scores = scores[scores[:, 2].argsort()[::-1]]
        best_counter = 1
        k = 0
        while best_counter < 3:
            if sorted_scores[k,1] != sorted_scores[k,0]:
                data.loc[i,f'best_pair_{best_counter}'] = sorted_scores[k,1]
                data.loc[i,f'best_score_{best_counter}'] = sorted_scores[k,2]
                best_counter += 1
            k += 1
    
    #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É, –≤–∞–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞
    data.to_csv('Alias_data_1.csv',index=False)
    
    # –í—ã–≤–æ–¥–∏–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã –∏–≥—Ä–æ–∫–∞
    current = data.loc[data['phone_number'] == int(phone_number)]
    results = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', '–°—Ö–æ–∂–µ—Å—Ç—å –º—ã—Å–ª–µ–π', '–ö–æ–Ω—Ç–∞–∫—Ç'])
    results.loc[len(results.index)] = [data.iloc[int(current['best_pair_1'])]['name'], float(current['best_score_1']),
                               data.iloc[int(current['best_pair_1'])]['link']]
    results.loc[len(results.index)] = [data.iloc[int(current['best_pair_2'])]['name'], float(current['best_score_2']),
                               data.iloc[int(current['best_pair_2'])]['link']]
    # –í—ã–≤–æ–¥–∏–º —Å—Ö–æ–∂–∏–µ —É–º—ã
    st.header(':green[–ê –≤–æ—Ç –∏ –∏–≥—Ä–æ–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –º—ã—Å–ª—è–º–∏] üß≠')
    st.dataframe(results)
    
    st.header(':green[–û–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–∞—à–∏ –∏ –ø–æ—Ö–æ–∂–∏—Ö –∏–≥—Ä–æ–∫–æ–≤] üëÄ')
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_1 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_1])
    alias_1.loc[len(alias_1.index)] = [str(current['name'].values[0]), str(current['alias_1'].values[0])]
    alias_1.loc[len(alias_1.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_1']]
    alias_1.loc[len(alias_1.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_1']]
    st.dataframe(alias_1)
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_2 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_2])
    alias_2.loc[len(alias_2.index)] = [str(current['name'].values[0]), str(current['alias_2'].values[0])]
    alias_2.loc[len(alias_2.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_2']]
    alias_2.loc[len(alias_2.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_2']]
    st.dataframe(alias_2)

    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_3 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_3])
    alias_3.loc[len(alias_3.index)] = [str(current['name'].values[0]), str(current['alias_3'].values[0])]
    alias_3.loc[len(alias_3.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_3']]
    alias_3.loc[len(alias_3.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_3']]
    st.dataframe(alias_3)
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_4 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_4])
    alias_4.loc[len(alias_4.index)] = [str(current['name'].values[0]), str(current['alias_4'].values[0])]
    alias_4.loc[len(alias_4.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_4']]
    alias_4.loc[len(alias_4.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_4']]
    st.dataframe(alias_4)
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_5 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_5])
    alias_5.loc[len(alias_5.index)] = [str(current['name'].values[0]), str(current['alias_5'].values[0])]
    alias_5.loc[len(alias_5.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_5']]
    alias_5.loc[len(alias_5.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_5']]
    st.dataframe(alias_5)

    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_6 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_6])
    alias_6.loc[len(alias_6.index)] = [str(current['name'].values[0]), str(current['alias_6'].values[0])]
    alias_6.loc[len(alias_6.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_6']]
    alias_6.loc[len(alias_6.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_6']]
    st.dataframe(alias_6)
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
    alias_7 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_7])
    alias_7.loc[len(alias_7.index)] = [str(current['name'].values[0]), str(current['alias_7'].values[0])]
    alias_7.loc[len(alias_7.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_7']]
    alias_7.loc[len(alias_7.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_7']]
    st.dataframe(alias_7)

st.text('')
st.header(':green[–ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–ª–∏! –ò –Ω–µ —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞, –∞ —Ö–æ—á–µ—à—å –≥–ª—è–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ –Ω–∞–∂–∏–º–∞–π —Å–Ω–∏–∑—É üëá]')
st.subheader(':red[–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞]')
phone_number = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7 –∏ –¥—Ä))')
watch_results = st.button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–≤ üß≠')
if watch_results:
    st.header(':green[–ò–≥—Ä–æ–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –º—ã—Å–ª—è–º–∏] üß≠')
    # –°—á–µ—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    data = pd.read_csv('Alias_data_1.csv')
    for i in range(len(data['embedding_1'])):
        for j in range(1, alias_num + 1):
            data[f'embedding_{j}'][i] = np.array(data[f'embedding_{j}'][i].replace('[', ' ').replace(']', ' ').split()).astype(np.float64)
    
    # –°—á–µ—Ç–∞–µ–º –≤—Å–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É –≤—Å–µ—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    scores_by_i = []
    strings_count, _ = data.shape
    for i in range(0,strings_count):
        inner_scores = []
        for j in range(0,strings_count):
            cosine_scores = []
            for k in range(1, alias_num + 1):
                cosine_scores.append(float(util.cos_sim(data.iloc[i][f'embedding_{k}'], data.iloc[j][f'embedding_{k}'])))
            inner_scores.append([i, j, np.mean(cosine_scores)])
        scores_by_i.append(inner_scores)
    
    # –ò—â–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–µ–º –±–ª–∏–∑–∫–∏—Ö –ø–æ —Å–º—ã—Å–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    scores_by_i = np.array(scores_by_i)
    for i in range(0,len(scores_by_i)):
        scores = scores_by_i[i]
        sorted_scores = scores[scores[:, 2].argsort()[::-1]]
        best_counter = 1
        k = 0
        while best_counter < 3:
            if sorted_scores[k,1] != sorted_scores[k,0]:
                data.loc[i,f'best_pair_{best_counter}'] = sorted_scores[k,1]
                data.loc[i,f'best_score_{best_counter}'] = sorted_scores[k,2]
                best_counter += 1
            k += 1
            
    row_index = data.loc[data['phone_number'] == int(phone_number)].index
    current = data.loc[data['phone_number'] == int(phone_number)]
    if row_index.size > 0:
        # –í—ã–≤–æ–¥–∏–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã –∏–≥—Ä–æ–∫–∞
        results = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', '–°—Ö–æ–∂–µ—Å—Ç—å –º—ã—Å–ª–µ–π', '–ö–æ–Ω—Ç–∞–∫—Ç'])
        results.loc[len(results.index)] = [data.iloc[int(current['best_pair_1'])]['name'], float(current['best_score_1']),
                                   data.iloc[int(current['best_pair_1'])]['link']]
        results.loc[len(results.index)] = [data.iloc[int(current['best_pair_2'])]['name'], float(current['best_score_2']),
                                   data.iloc[int(current['best_pair_2'])]['link']]
        # –í—ã–≤–æ–¥–∏–º —Å—Ö–æ–∂–∏–µ —É–º—ã
        st.dataframe(results)
    else:
        st.header(':red[–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω!]')
        

watch_sentences = st.button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–≤ üëÄ')
if watch_sentences:
    data = pd.read_csv('Alias_data_1.csv')
    row_index = data.loc[data['phone_number'] == int(phone_number)].index
    current = data.loc[data['phone_number'] == int(phone_number)]
    if row_index.size > 0:
        st.header(':green[–û–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–∞—à–∏ –∏ –ø–æ—Ö–æ–∂–∏—Ö –∏–≥—Ä–æ–∫–æ–≤] üëÄ')
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_1 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_1])
        alias_1.loc[len(alias_1.index)] = [str(current['name'].values[0]), str(current['alias_1'].values[0])]
        alias_1.loc[len(alias_1.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_1']]
        alias_1.loc[len(alias_1.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_1']]
        st.dataframe(alias_1)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_2 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_2])
        alias_2.loc[len(alias_2.index)] = [str(current['name'].values[0]), str(current['alias_2'].values[0])]
        alias_2.loc[len(alias_2.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_2']]
        alias_2.loc[len(alias_2.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_2']]
        st.dataframe(alias_2)

        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_3 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_3])
        alias_3.loc[len(alias_3.index)] = [str(current['name'].values[0]), str(current['alias_3'].values[0])]
        alias_3.loc[len(alias_3.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_3']]
        alias_3.loc[len(alias_3.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_3']]
        st.dataframe(alias_3)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_4 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_4])
        alias_4.loc[len(alias_4.index)] = [str(current['name'].values[0]), str(current['alias_4'].values[0])]
        alias_4.loc[len(alias_4.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_4']]
        alias_4.loc[len(alias_4.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_4']]
        st.dataframe(alias_4)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_5 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_5])
        alias_5.loc[len(alias_5.index)] = [str(current['name'].values[0]), str(current['alias_5'].values[0])]
        alias_5.loc[len(alias_5.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_5']]
        alias_5.loc[len(alias_5.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_5']]
        st.dataframe(alias_5)

        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_6 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_6])
        alias_6.loc[len(alias_6.index)] = [str(current['name'].values[0]), str(current['alias_6'].values[0])]
        alias_6.loc[len(alias_6.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_6']]
        alias_6.loc[len(alias_6.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_6']]
        st.dataframe(alias_6)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ª—É—á—à–∏—Ö –ø–∞—Ä
        alias_7 = pd.DataFrame(columns = ['–°—Ö–æ–∂–∏–µ —É–º—ã', word_7])
        alias_7.loc[len(alias_7.index)] = [str(current['name'].values[0]), str(current['alias_7'].values[0])]
        alias_7.loc[len(alias_7.index)] = [data.iloc[int(current['best_pair_1'])]['name'], data.iloc[int(current['best_pair_1'])]['alias_7']]
        alias_7.loc[len(alias_7.index)] = [data.iloc[int(current['best_pair_2'])]['name'], data.iloc[int(current['best_pair_2'])]['alias_7']]
        st.dataframe(alias_7)
    else:
        st.header(':red[–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω!]')

watch_scores = st.button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å–æ –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ üß≠')
if watch_scores:
    # –°—á–µ—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    data = pd.read_csv('Alias_data_1.csv')
    for i in range(len(data['embedding_1'])):
        for j in range(1, alias_num + 1):
            data[f'embedding_{j}'][i] = np.array(data[f'embedding_{j}'][i].replace('[', ' ').replace(']', ' ').split()).astype(np.float64)
    
    # –°—á–µ—Ç–∞–µ–º –≤—Å–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É –≤—Å–µ—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    scores_by_i = []
    strings_count, _ = data.shape
    for i in range(0,strings_count):
        inner_scores = []
        for j in range(0,strings_count):
            cosine_scores = []
            for k in range(1, alias_num + 1):
                cosine_scores.append(float(util.cos_sim(data.iloc[i][f'embedding_{k}'], data.iloc[j][f'embedding_{k}'])))
            inner_scores.append([i, j, np.mean(cosine_scores)])
        scores_by_i.append(inner_scores)
        
    row_index = data.loc[data['phone_number'] == int(phone_number)].index.to_list()[0]
    scores = np.array(scores_by_i[row_index])[:,2]
    player_scores = pd.DataFrame(columns=['name','–°—Ö–æ–∂–µ—Å—Ç—å –º—ã—Å–ª–µ–π'])
    player_scores['name'] = data['name']
    player_scores['–°—Ö–æ–∂–µ—Å—Ç—å –º—ã—Å–ª–µ–π'] = scores
    player_scores.sort_values(by='–°—Ö–æ–∂–µ—Å—Ç—å –º—ã—Å–ª–µ–π', ascending=False, inplace=True)
    st.dataframe(player_scores)
    #fig = plt.figure(figsize=(10, 4))
    #plt.bar(player_scores['name'][1:],player_scores['–°—Ö–æ–∂–µ—Å—Ç—å –º—ã—Å–ª–µ–π'][1:])
    #st.pyplot(fig)

st.text('')
st.text('')
st.text('')
st.text('')
st.text('')
st.text('')
st.text('')
watch_data = st.button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤')
if watch_data:
    st.dataframe(data)

@st.cache
def convert_df(df):
    # IMPORTANT: Cache the conversion to prevent computation on every rerun
    return df.to_csv(index=False).encode('utf-8')

data_file = convert_df(data)

st.download_button(
    label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤",
    data=data_file,
    file_name='Alias_data_1_1.csv',
    mime='text/csv',
)
    